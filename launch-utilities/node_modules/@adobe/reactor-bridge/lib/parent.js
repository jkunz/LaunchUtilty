/***************************************************************************************
 * (c) 2017 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 ****************************************************************************************/

import Penpal from 'penpal';
import Logger from './utils/logger';

var CONNECTION_TIMEOUT_DURATION = 10000;
var RENDER_TIMEOUT_DURATION = 2000;

var logger = new Logger('ExtensionBridge:Parent');
var noop = function noop() {};

var Promise = window.Promise;

export var ERROR_CODES = {
  CONNECTION_TIMEOUT: 'connectionTimeout',
  RENDER_TIMEOUT: 'renderTimeout',
  DESTROYED: 'destroyed'
};

/**
 * An object providing bridge-related API.
 * @typedef {Object} Bridge
 * @property {Promise} The promise will be resolved once (1) communication with the iframe has
 * been established, (2) the iframe has been resized to its content, and (3) the iframe has
 * acknowledged receiving the initial init() call. The promise will be resolved
 * with an {IframeAPI} object that will act as the API to use to communicate with the iframe.
 * @property {HTMLIframeElement} iframe The created iframe. You may use this to add classes to the
 * iframe, etc.
 * @property {Function} destroy Removes the iframe from its container and cleans up any supporting
 * utilities.
 */

/**
 * An API the consumer will use to call methods on the iframe.
 * @typedef {Object} IframeAPI
 * @property {Function} validate Validates the extension view.
 * @property {Function} getSettings Retrieves settings from the extension view.
 */

/**
 * Loads an extension iframe and connects all the necessary APIs.
 * @param {Object} options
 * @param {string} options.url The URL of the extension view to load.
 * @param {Object} [options.extensionInitOptions={}] The options to be passed to the initial init()
 * call on the extension view.
 * @param {HTMLElement} [options.container=document.body] The container DOM element to which the
 * extension iframe should be added.
 * @param {number} [options.connectionTimeoutDuration=10000] The amount of time, in milliseconds,
 * that must pass while attempting to establish communication with the iframe before rejecting
 * the returned promise with a CONNECTION_TIMEOUT error code.
 * @param {number} [options.renderTimeoutDuration=2000] The amount of time, in milliseconds,
 * that must pass while attempting to render the iframe before rejecting the returned promise
 * with a RENDER_TIMEOUT error code. This duration begins after communication with the iframe
 * has been established.
 * @param {Function} [options.openCodeEditor] The function to call when the extension view requests
 * that the code editor should open. The function may be passed existing code and should return
 * a promise to be resolved with updated code.
 * @param {Function} [options.openRegexTester] The function to call when the extension view requests
 * that the regex tester should open. The function may be passed an existing regular expression
 * string and should return a promise to be resolved with an updated regular expression string.
 * @param {Function} [options.openDataElementSelector] The function to call when the extension view
 * requests that the data element selector should open. The function should return a promise that
 * is resolved with the selected data element name.
 * @returns {Bridge}
 */
export var loadIframe = function loadIframe(options) {
  var url = options.url,
      _options$extensionIni = options.extensionInitOptions,
      extensionInitOptions = _options$extensionIni === undefined ? {} : _options$extensionIni,
      _options$container = options.container,
      container = _options$container === undefined ? document.body : _options$container,
      _options$connectionTi = options.connectionTimeoutDuration,
      connectionTimeoutDuration = _options$connectionTi === undefined ? CONNECTION_TIMEOUT_DURATION : _options$connectionTi,
      _options$renderTimeou = options.renderTimeoutDuration,
      renderTimeoutDuration = _options$renderTimeou === undefined ? RENDER_TIMEOUT_DURATION : _options$renderTimeou,
      _options$openCodeEdit = options.openCodeEditor,
      openCodeEditor = _options$openCodeEdit === undefined ? noop : _options$openCodeEdit,
      _options$openRegexTes = options.openRegexTester,
      openRegexTester = _options$openRegexTes === undefined ? noop : _options$openRegexTes,
      _options$openDataElem = options.openDataElementSelector,
      openDataElementSelector = _options$openDataElem === undefined ? noop : _options$openDataElem,
      _options$markAsDirty = options.markAsDirty,
      markAsDirty = _options$markAsDirty === undefined ? noop : _options$markAsDirty;


  var destroy = void 0;
  var iframe = void 0;

  var createOpenSharedViewProxy = function createOpenSharedViewProxy(openSharedViewFn) {
    return function () {
      return Promise.resolve(openSharedViewFn.apply(undefined, arguments));
    };
  };

  var loadPromise = new Promise(function (resolve, reject) {
    var renderTimeoutId = void 0;

    var penpalConnection = Penpal.connectToChild({
      url: url,
      appendTo: container,
      timeout: connectionTimeoutDuration,
      methods: {
        openCodeEditor: createOpenSharedViewProxy(openCodeEditor),
        openRegexTester: createOpenSharedViewProxy(openRegexTester),
        openDataElementSelector: createOpenSharedViewProxy(openDataElementSelector),
        extensionRegistered: function extensionRegistered() {
          logger.log('Extension registered.');
          penpalConnection.promise.then(function (child) {
            child.init(extensionInitOptions).then(function () {
              clearTimeout(renderTimeoutId);
              logger.log('Extension initialized.');
              resolve({
                // We hand init back even though we just called init(). This is really for
                // the sandbox tool's benefit so a developer testing their extension view can
                // initialize multiple times with different info.
                init: child.init,
                validate: child.validate,
                getSettings: child.getSettings
              });
            }).catch(function (error) {
              clearTimeout(renderTimeoutId);
              reject(error);
            });
          });
        },

        markAsDirty: markAsDirty
      }
    });

    penpalConnection.promise.then(function () {
      renderTimeoutId = setTimeout(function () {
        reject(ERROR_CODES.RENDER_TIMEOUT);
        destroy();
      }, renderTimeoutDuration);
    }, function (error) {
      if (error.code === Penpal.ERR_CONNECTION_TIMEOUT) {
        reject(ERROR_CODES.CONNECTION_TIMEOUT);
      } else {
        reject(error);
      }
    });

    destroy = function destroy() {
      reject(ERROR_CODES.DESTROYED);
      penpalConnection.destroy();
    };

    iframe = penpalConnection.iframe;
  });

  iframe.setAttribute('sandbox', 'allow-same-origin allow-scripts allow-popups');

  return {
    promise: loadPromise,
    iframe: iframe,
    destroy: destroy
  };
};

export var setPromise = function setPromise(value) {
  Promise = value;
  Penpal.Promise = value;
};
export var setDebug = function setDebug(value) {
  Penpal.debug = value;
  Logger.enabled = value;
};